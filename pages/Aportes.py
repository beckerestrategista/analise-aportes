import streamlit as st
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
from datetime import timedelta

# --- FUN√á√ÉO DE PLOTAGEM (AJUSTADA E ROBUSTA) ---
def plotar_grafico_aportes(ticker, df_aportes_filtrado, fig, ax, janela_dias=365):
    try:
        coluna_data = 'Data do Neg√≥cio'
        coluna_quantidade = 'Quantidade'
        datas_compra = pd.to_datetime(df_aportes_filtrado[coluna_data], format='%d/%m/%Y')
        quantidades_compra = df_aportes_filtrado[coluna_quantidade].tolist()
    except Exception as e:
        st.error(f"Ocorreu um erro ao processar os dados do ticker: {e}")
        return

    ticker_sa = f"{ticker.upper()}.SA"
    inicio = min(datas_compra) - timedelta(days=janela_dias + 5)
    fim = max(datas_compra) + timedelta(days=janela_dias + 5)
    df_cotacoes = yf.download(ticker_sa, start=inicio.strftime("%Y-%m-%d"), end=fim.strftime("%Y-%m-%d"), progress=False)

    if df_cotacoes.empty:
        st.warning(f"N√£o foram encontrados dados de cota√ß√£o para '{ticker_sa}' no Yahoo Finance.")
        return

    ax.plot(df_cotacoes.index, df_cotacoes['Close'], label=f'Cota√ß√£o ({ticker_sa})', color='royalblue', linewidth=2, zorder=1)
    
    fator_tamanho = 5
    for data, quantidade in zip(datas_compra, quantidades_compra):
        try:
            data_ajustada = df_cotacoes.index.asof(data)
            preco_no_dia = df_cotacoes.loc[data_ajustada]['Close']
            ax.scatter(data_ajustada, preco_no_dia, s=quantidade * fator_tamanho, color='red', edgecolor='black', alpha=0.7, zorder=5)
        except (KeyError, IndexError, TypeError):
            pass

    min_q = min(quantidades_compra) if quantidades_compra else 0
    max_q = max(quantidades_compra) if quantidades_compra else 0
    s_min = "unidade" if min_q == 1 else "unidades"
    s_max = "unidade" if max_q == 1 else "unidades"
    ax.scatter([], [], s=min_q * fator_tamanho, color='red', edgecolor='black', alpha=0.7, label=f'Aporte M√≠n. ({min_q} {s_min})')
    ax.scatter([], [], s=max_q * fator_tamanho, color='red', edgecolor='black', alpha=0.7, label=f'Aporte M√°x. ({max_q} {s_max})')
    
    ax.set_title(f'Hist√≥rico de Cota√ß√µes e Volume de Compras - {ticker_sa}', fontsize=16, weight='bold')
    ax.set_xlabel('Data', fontsize=12)
    ax.set_ylabel('Pre√ßo de Fechamento (R$)', fontsize=12)
    ax.legend(loc='upper left', fancybox=True, labelspacing=1.2)
    ax.grid(True, which='both', linestyle='--', linewidth=0.5)

# --- L√ìGICA DE NAVEGA√á√ÉO INTERNA DA P√ÅGINA ---
if 'pagina_aportes' not in st.session_state:
    st.session_state.pagina_aportes = 'upload'

def carregar_e_validar():
    arquivo_carregado = st.session_state.get('uploader_aportes', None)
    if arquivo_carregado:
        if 'movimentacao' in arquivo_carregado.name.lower():
            st.error("‚ùå **Arquivo Incorreto!** Voc√™ carregou a planilha de **movimenta√ß√µes**. Por favor, acesse a aba **Negocia√ß√£o** no portal da B3.")
            return
        try:
            with st.spinner('Carregando e validando sua planilha...'):
                df = pd.read_excel(arquivo_carregado)
                coluna_movimentacao = 'Tipo de Movimenta√ß√£o'
                coluna_ticker = 'C√≥digo de Negocia√ß√£o'
                coluna_preco = 'Pre√ßo'
                
                if coluna_movimentacao not in df.columns:
                    st.error(f"A coluna '{coluna_movimentacao}' n√£o foi encontrada. Verifique se a planilha √© a de 'Negocia√ß√£o' da B3.")
                    return
                
                df_compras = df[df[coluna_movimentacao] == 'Compra'].copy()
                if df_compras.empty:
                    st.warning("A planilha carregada n√£o cont√©m nenhuma opera√ß√£o de 'Compra'.")
                    return
                
                df_compras[coluna_preco] = pd.to_numeric(df_compras[coluna_preco].astype(str).str.replace('R$', '', regex=False).str.strip().str.replace(',', '.', regex=False), errors='coerce')
                df_compras.dropna(subset=[coluna_preco], inplace=True)
                
                df_compras[coluna_ticker] = df_compras[coluna_ticker].astype(str).str.strip().str.upper().str.replace('F$', '', regex=True)
                df_compras[coluna_ticker] = df_compras[coluna_ticker].str.replace('TRPL4', 'ISAE4', regex=True)
                df_compras[coluna_ticker] = df_compras[coluna_ticker].str.replace('TRPL3', 'ISAE3', regex=True)
                
                st.session_state.df_negociacoes = df_compras
                st.session_state.pagina_aportes = 'analise'
        except Exception as e:
            st.error(f"N√£o foi poss√≠vel processar a planilha. Verifique o arquivo. Erro: {e}")
    else:
        st.warning("Por favor, carregue um arquivo para continuar.")

def voltar_para_upload():
    # Limpa os dados da sess√£o ao voltar
    for key in ['df_negociacoes', 'pagina_aportes', 'uploader_aportes']:
        if key in st.session_state:
            del st.session_state[key]
    st.session_state.pagina_aportes = 'upload'

# --- RENDERIZA√á√ÉO DA P√ÅGINA DE APORTES ---

st.title("üìä An√°lise de Aportes")

# ETAPA 1: UPLOAD
if st.session_state.pagina_aportes == 'upload':
    st.header('Passo 1: Carregue sua Planilha de Negocia√ß√£o')
    st.markdown("Use o arquivo **.xlsx** de **negocia√ß√µes** obtido no Portal do Investidor da B3.")

    # Inserido o passo a passo que voc√™ queria
    with st.expander("Precisa de ajuda para obter o arquivo? Clique aqui."):
        st.markdown("""
        1.  **üîë Acesse o Portal do Investidor B3** ([https://www.investidor.b3.com.br](https://www.investidor.b3.com.br))
        2.  **üìú Encontre seu Extrato de Negocia√ß√µes:** No menu, navegue por **Extratos > Negocia√ß√£o**. (‚ö†Ô∏è N√£o use a aba "Movimenta√ß√£o"!)
        3.  **üìÖ Filtre o Per√≠odo Completo:** Para uma an√°lise completa, filtre desde o seu primeiro investimento.
        4.  **üì• Baixe a Planilha:** Clique no √≠cone de **Download** (‚¨áÔ∏è) para baixar o arquivo em formato Excel (`.xlsx`).
        """)

    st.file_uploader(
        "**Arraste o arquivo da B3 para c√° ou clique para procurar**",
        type=['xlsx'],
        key='uploader_aportes',
        label_visibility='visible'
    )
    st.button('Analisar Planilha', on_click=carregar_e_validar, type="primary")

# ETAPA 2: AN√ÅLISE
elif st.session_state.pagina_aportes == 'analise':
    st.header('Passo 2: Escolha o Ativo para An√°lise')
    df_completo = st.session_state.df_negociacoes
    coluna_ticker = 'C√≥digo de Negocia√ß√£o'

    try:
        # L√≥gica de ordena√ß√£o dos tickers reintroduzida
        tickers_unicos = df_completo[coluna_ticker].unique().tolist()
        outros_ativos = [ticker for ticker in tickers_unicos if not ticker.endswith('11')]
        ativos_com_final_11 = [ticker for ticker in tickers_unicos if ticker.endswith('11')]
        lista_ordenada = sorted(outros_ativos) + sorted(ativos_com_final_11)
    except KeyError:
        st.error(f"A coluna '{coluna_ticker}' n√£o foi encontrada na sua planilha.")
        st.button('Voltar', on_click=voltar_para_upload)
        st.stop()

    col1, col2 = st.columns([0.7, 0.3])
    with col1:
        ticker_selecionado = st.selectbox('Selecione o Ativo:', options=lista_ordenada)
    with col2:
        janela_input = st.number_input('Janela de tempo (dias):', min_value=30, step=30, format="%d", value=365)
    
    # Bot√£o para gerar o gr√°fico
    if st.button('Gerar Gr√°fico', type="primary"):
        if ticker_selecionado:
            with st.spinner(f'Buscando dados de {ticker_selecionado} e gerando o gr√°fico...'):
                filtro_ticker = df_completo[coluna_ticker] == ticker_selecionado
                df_filtrado = df_completo[filtro_ticker]
                fig, ax = plt.subplots(figsize=(15, 8))
                plt.style.use('seaborn-v0_8-darkgrid')
                plotar_grafico_aportes(ticker_selecionado, df_filtrado, fig, ax, janela_input)
                st.pyplot(fig)
        else:
            st.warning('Por favor, selecione um ativo da lista.')
            
    st.button('Carregar Outra Planilha', on_click=voltar_para_upload)